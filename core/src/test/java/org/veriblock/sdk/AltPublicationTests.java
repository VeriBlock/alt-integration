// VeriBlock Blockchain Project
// Copyright 2017-2018 VeriBlock, Inc
// Copyright 2018-2019 Xenios SEZC
// All rights reserved.
// https://www.veriblock.org
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.

package org.veriblock.sdk;

import org.junit.Assert;
import org.junit.Test;
import org.veriblock.sdk.services.SerializeDeserializeService;
import org.veriblock.sdk.services.ValidationService;
import org.veriblock.sdk.util.Utils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Collections;
import java.util.List;

public class AltPublicationTests {

    @Test
    public void verify_WhenValid() {
        VeriBlockTransaction tx = new VeriBlockTransaction(
                (byte)0x01,
                new Address("VB2zTVQH6JmjJJZTYwCcrDB9kAJp7G"),
                Coin.valueOf(1000L),
                Collections.emptyList(),
                7L,
                Base64.getDecoder().decode("BP////8BEAARIjNEVWZ3iJmqu8zd7v8BAQABAf8="),
                Utils.decodeHex("304402201124F58AC7AF281A5B7889E02F726483DA1DC2387C5B58456F969B9B0AEF02FC022074F8522D51D4E01329E435657EF7F4D424D7DBD64F7E3FECBC9554C75988AA97"),
                Utils.decodeHex("3056301006072A8648CE3D020106052B8104000A03420004B558286EE19E59D8B4D0F72505B62491D239AD3AAF6657D52AB5C2A09C93EC361E11359B2527A924A79135AAF9C61EB9150D34F40E89299ED54DD5372EBB2C88"), null);

        AltPublication publication = new AltPublication(
                tx,
                new VeriBlockMerklePath("1:13:E20ED2CFFAC2DDB4E85C8A852BD63320324B6014259DA1E0FE4491F084704997:5B977EA09A554AD56957F662284044E7D37450DDADF7DB3647712F5969399787:20D0A3D873EEEEE6A222A75316DCE60B53CA43EAEA09D27F0ECE897303A53AE9:C06FE913DCA5DC2736563B80834D69E6DFDF1B1E92383EA62791E410421B6C11:049F68D350EEB8B3DF630C8308B5C8C2BA4CD6210868395B084AF84D19FF0E90:0000000000000000000000000000000000000000000000000000000000000000:36252DFC621DE420FB083AD9D8767CBA627EDDEEC64E421E9576CEE21297DD0A"),
                new VeriBlockBlock(5000, (short)2,
                        VBlakeHash.wrap("000000000000069B7E7B7245449C60619294546AD825AF03"),
                        VBlakeHash.wrap("00000000000023A90C8B0DFE7C55C1B0935637860679DDD5"),
                        VBlakeHash.wrap("00000000000065630808D69AB26B825EE4FD21082E18686E"),
                        Sha256Hash.wrap("0356EB39B851682679F9A0131A4E4A5F", Sha256Hash.VERIBLOCK_MERKLE_ROOT_LENGTH),
                        1553699059,
                        16842752,
                        1),
                Collections.emptyList());

        ValidationService.verify(publication);
    }

    @Test
    public void checkMerklePath_WhenMerklePathProvesADifferentTransaction() {
        VeriBlockTransaction tx = new VeriBlockTransaction(
                (byte)0x01,
                new Address("VB2zTVQH6JmjJJZTYwCcrDB9kAJp7G"),
                Coin.valueOf(1000L),
                Collections.emptyList(),
                7L,
                Base64.getDecoder().decode("BP////8BEAARIjNEVWZ3iJmqu8zd7v8BAQABAf8="),
                Utils.decodeHex("304402201124F58AC7AF281A5B7889E02F726483DA1DC2387C5B58456F969B9B0AEF02FC022074F8522D51D4E01329E435657EF7F4D424D7DBD64F7E3FECBC9554C75988AA97"),
                Utils.decodeHex("3056301006072A8648CE3D020106052B8104000A03420004B558286EE19E59D8B4D0F72505B62491D239AD3AAF6657D52AB5C2A09C93EC361E11359B2527A924A79135AAF9C61EB9150D34F40E89299ED54DD5372EBB2C88"), null);

        AltPublication publication = new AltPublication(
                tx,
                new VeriBlockMerklePath("1:13:5B977EA09A554AD56957F662284044E7D37450DDADF7DB3647712F5969399787:E20ED2CFFAC2DDB4E85C8A852BD63320324B6014259DA1E0FE4491F084704997:20D0A3D873EEEEE6A222A75316DCE60B53CA43EAEA09D27F0ECE897303A53AE9:C06FE913DCA5DC2736563B80834D69E6DFDF1B1E92383EA62791E410421B6C11:049F68D350EEB8B3DF630C8308B5C8C2BA4CD6210868395B084AF84D19FF0E90:0000000000000000000000000000000000000000000000000000000000000000:36252DFC621DE420FB083AD9D8767CBA627EDDEEC64E421E9576CEE21297DD0A"),
                new VeriBlockBlock(5000, (short)2,
                        VBlakeHash.wrap("000000000000069B7E7B7245449C60619294546AD825AF03"),
                        VBlakeHash.wrap("00000000000023A90C8B0DFE7C55C1B0935637860679DDD5"),
                        VBlakeHash.wrap("00000000000065630808D69AB26B825EE4FD21082E18686E"),
                        Sha256Hash.wrap("0356EB39B851682679F9A0131A4E4A5F", Sha256Hash.VERIBLOCK_MERKLE_ROOT_LENGTH),
                        1553699059,
                        16842752,
                        1),
                Collections.emptyList());

        try {
            ValidationService.checkMerklePath(publication);
            Assert.fail();
        } catch (VerificationException e) {
            Assert.assertTrue("VeriBlock transaction cannot be proven by merkle path".equals(e.getMessage()));
        }
    }

    @Test
    public void checkMerklePath_WhenMerkleRootsDoNotMatch() {
        VeriBlockTransaction tx = new VeriBlockTransaction(
                (byte)0x01,
                new Address("VB2zTVQH6JmjJJZTYwCcrDB9kAJp7G"),
                Coin.valueOf(1000L),
                Collections.emptyList(),
                7L,
                Base64.getDecoder().decode("BP////8BEAARIjNEVWZ3iJmqu8zd7v8BAQABAf8="),
                Utils.decodeHex("304402201124F58AC7AF281A5B7889E02F726483DA1DC2387C5B58456F969B9B0AEF02FC022074F8522D51D4E01329E435657EF7F4D424D7DBD64F7E3FECBC9554C75988AA97"),
                Utils.decodeHex("3056301006072A8648CE3D020106052B8104000A03420004B558286EE19E59D8B4D0F72505B62491D239AD3AAF6657D52AB5C2A09C93EC361E11359B2527A924A79135AAF9C61EB9150D34F40E89299ED54DD5372EBB2C88"), null);

        AltPublication publication = new AltPublication(
                tx,
                new VeriBlockMerklePath("0:13:E20ED2CFFAC2DDB4E85C8A852BD63320324B6014259DA1E0FE4491F084704997:5B977EA09A554AD56957F662284044E7D37450DDADF7DB3647712F5969399787:20D0A3D873EEEEE6A222A75316DCE60B53CA43EAEA09D27F0ECE897303A53AE9:C06FE913DCA5DC2736563B80834D69E6DFDF1B1E92383EA62791E410421B6C11:049F68D350EEB8B3DF630C8308B5C8C2BA4CD6210868395B084AF84D19FF0E90:0000000000000000000000000000000000000000000000000000000000000000:36252DFC621DE420FB083AD9D8767CBA627EDDEEC64E421E9576CEE21297DD0A"),
                new VeriBlockBlock(5000, (short)2,
                        VBlakeHash.wrap("000000000000069B7E7B7245449C60619294546AD825AF03"),
                        VBlakeHash.wrap("00000000000023A90C8B0DFE7C55C1B0935637860679DDD5"),
                        VBlakeHash.wrap("00000000000065630808D69AB26B825EE4FD21082E18686E"),
                        Sha256Hash.wrap("0356EB39B851682679F9A0131A4E4A5F", Sha256Hash.VERIBLOCK_MERKLE_ROOT_LENGTH),
                        1553699059,
                        16842752,
                        1),
                Collections.emptyList());

        try {
            ValidationService.checkMerklePath(publication);
            Assert.fail();
        } catch (VerificationException e) {
            Assert.assertTrue("VeriBlock transaction does not belong to containing block".equals(e.getMessage()));
        }
    }

    @Test
    public void checkBlocks_WhenNotContiguous() {
        VeriBlockTransaction tx = new VeriBlockTransaction(
                (byte)0x01,
                new Address("VB2zTVQH6JmjJJZTYwCcrDB9kAJp7G"),
                Coin.valueOf(1000L),
                Collections.emptyList(),
                7L,
                Base64.getDecoder().decode("BP////8BEAARIjNEVWZ3iJmqu8zd7v8BAQABAf8="),
                Utils.decodeHex("304402201124F58AC7AF281A5B7889E02F726483DA1DC2387C5B58456F969B9B0AEF02FC022074F8522D51D4E01329E435657EF7F4D424D7DBD64F7E3FECBC9554C75988AA97"),
                Utils.decodeHex("3056301006072A8648CE3D020106052B8104000A03420004B558286EE19E59D8B4D0F72505B62491D239AD3AAF6657D52AB5C2A09C93EC361E11359B2527A924A79135AAF9C61EB9150D34F40E89299ED54DD5372EBB2C88"), null);

        AltPublication publication = new AltPublication(
                tx,
                new VeriBlockMerklePath("1:13:E20ED2CFFAC2DDB4E85C8A852BD63320324B6014259DA1E0FE4491F084704997:5B977EA09A554AD56957F662284044E7D37450DDADF7DB3647712F5969399787:20D0A3D873EEEEE6A222A75316DCE60B53CA43EAEA09D27F0ECE897303A53AE9:C06FE913DCA5DC2736563B80834D69E6DFDF1B1E92383EA62791E410421B6C11:049F68D350EEB8B3DF630C8308B5C8C2BA4CD6210868395B084AF84D19FF0E90:0000000000000000000000000000000000000000000000000000000000000000:36252DFC621DE420FB083AD9D8767CBA627EDDEEC64E421E9576CEE21297DD0A"),
                new VeriBlockBlock(5000, (short)2,
                        VBlakeHash.wrap("000000000000069B7E7B7245449C60619294546AD825AF03"),
                        VBlakeHash.wrap("00000000000023A90C8B0DFE7C55C1B0935637860679DDD5"),
                        VBlakeHash.wrap("00000000000065630808D69AB26B825EE4FD21082E18686E"),
                        Sha256Hash.wrap("0356EB39B851682679F9A0131A4E4A5F", Sha256Hash.VERIBLOCK_MERKLE_ROOT_LENGTH),
                        1553699059,
                        16842752,
                        1),
                Arrays.asList(SerializeDeserializeService.parseVeriBlockBlock(Base64.getDecoder().decode("AAATbQAC+QNCG0kCwUNJxXulsJNWN4YGed3VXuT9IQguGGhuQZwPGl6HY18fMkR2ONB77VybkYoHAhMwn88yVg==")),
                        SerializeDeserializeService.parseVeriBlockBlock(Base64.getDecoder().decode("AAATbgACR5aVyd6a4kNFGHl2sJNWN4YGed3VXuT9IQguGGhuqei8W2tBNI+T1dj6apHx1VybkZ8HAhzCNiNzkg=="))));


        try {
            ValidationService.checkBlocks(publication);
            Assert.fail();
        } catch (VerificationException e) {
            Assert.assertTrue("Blocks are not contiguous".equals(e.getMessage()));
        }
    }

    @Test
    public void serializeRoundtrip() {
        VeriBlockTransaction tx = new VeriBlockTransaction(
                (byte)0x01,
                new Address("VB2zTVQH6JmjJJZTYwCcrDB9kAJp7G"),
                Coin.valueOf(1000L),
                Collections.emptyList(),
                7L,
                Base64.getDecoder().decode("BP////8BEAARIjNEVWZ3iJmqu8zd7v8BAQABAf8="),
                Utils.decodeHex("304402201124F58AC7AF281A5B7889E02F726483DA1DC2387C5B58456F969B9B0AEF02FC022074F8522D51D4E01329E435657EF7F4D424D7DBD64F7E3FECBC9554C75988AA97"),
                Utils.decodeHex("3056301006072A8648CE3D020106052B8104000A03420004B558286EE19E59D8B4D0F72505B62491D239AD3AAF6657D52AB5C2A09C93EC361E11359B2527A924A79135AAF9C61EB9150D34F40E89299ED54DD5372EBB2C88"), null);

        AltPublication input = new AltPublication(
                tx,
                new VeriBlockMerklePath("1:13:E20ED2CFFAC2DDB4E85C8A852BD63320324B6014259DA1E0FE4491F084704997:5B977EA09A554AD56957F662284044E7D37450DDADF7DB3647712F5969399787:20D0A3D873EEEEE6A222A75316DCE60B53CA43EAEA09D27F0ECE897303A53AE9:C06FE913DCA5DC2736563B80834D69E6DFDF1B1E92383EA62791E410421B6C11:049F68D350EEB8B3DF630C8308B5C8C2BA4CD6210868395B084AF84D19FF0E90:0000000000000000000000000000000000000000000000000000000000000000:36252DFC621DE420FB083AD9D8767CBA627EDDEEC64E421E9576CEE21297DD0A"),
                new VeriBlockBlock(5000, (short)2,
                        VBlakeHash.wrap("000000000000069B7E7B7245449C60619294546AD825AF03"),
                        VBlakeHash.wrap("00000000000023A90C8B0DFE7C55C1B0935637860679DDD5"),
                        VBlakeHash.wrap("00000000000065630808D69AB26B825EE4FD21082E18686E"),
                        Sha256Hash.wrap("0356EB39B851682679F9A0131A4E4A5F", Sha256Hash.VERIBLOCK_MERKLE_ROOT_LENGTH),
                        1553699059,
                        16842752,
                        1),
                Collections.emptyList());

        byte[] serialized = SerializeDeserializeService.serialize(input);
        AltPublication deserialized = SerializeDeserializeService.parseAltPublication(serialized);

        Assert.assertEquals(input, deserialized);
    }
    
    @Test
    public void blobParseVerifyTest() {
        byte[] data = Utils.decodeHex
        AltPublication deserialized = SerializeDeserializeService.parseAltPublication(data);
        ValidationService.verify(deserialized);
    }
    
    @Test
    public void parseWhenInvalidContextCount() {
        VeriBlockTransaction tx = new VeriBlockTransaction(
                (byte)0x01,
                new Address("VB2zTVQH6JmjJJZTYwCcrDB9kAJp7G"),
                Coin.valueOf(1000L),
                Collections.emptyList(),
                7L,
                Base64.getDecoder().decode("BP////8BEAARIjNEVWZ3iJmqu8zd7v8BAQABAf8="),
                Utils.decodeHex("304402201124F58AC7AF281A5B7889E02F726483DA1DC2387C5B58456F969B9B0AEF02FC022074F8522D51D4E01329E435657EF7F4D424D7DBD64F7E3FECBC9554C75988AA97"),
                Utils.decodeHex("3056301006072A8648CE3D020106052B8104000A03420004B558286EE19E59D8B4D0F72505B62491D239AD3AAF6657D52AB5C2A09C93EC361E11359B2527A924A79135AAF9C61EB9150D34F40E89299ED54DD5372EBB2C88"), null);

        VeriBlockBlock block = new VeriBlockBlock(5000, (short)2,
                VBlakeHash.wrap("000000000000069B7E7B7245449C60619294546AD825AF03"),
                VBlakeHash.wrap("00000000000023A90C8B0DFE7C55C1B0935637860679DDD5"),
                VBlakeHash.wrap("00000000000065630808D69AB26B825EE4FD21082E18686E"),
                Sha256Hash.wrap("0356EB39B851682679F9A0131A4E4A5F", Sha256Hash.VERIBLOCK_MERKLE_ROOT_LENGTH),
                1553699059,
                16842752,
                1);
        
        List<VeriBlockBlock> context = new ArrayList<>();
        for(int i = 0; i < AltPublication.MAX_CONTEXT_COUNT + 1; i++) {
            context.add(block);
        }
        
        AltPublication input = new AltPublication(
                tx,
                new VeriBlockMerklePath("1:13:E20ED2CFFAC2DDB4E85C8A852BD63320324B6014259DA1E0FE4491F084704997:5B977EA09A554AD56957F662284044E7D37450DDADF7DB3647712F5969399787:20D0A3D873EEEEE6A222A75316DCE60B53CA43EAEA09D27F0ECE897303A53AE9:C06FE913DCA5DC2736563B80834D69E6DFDF1B1E92383EA62791E410421B6C11:049F68D350EEB8B3DF630C8308B5C8C2BA4CD6210868395B084AF84D19FF0E90:0000000000000000000000000000000000000000000000000000000000000000:36252DFC621DE420FB083AD9D8767CBA627EDDEEC64E421E9576CEE21297DD0A"),
                block,
                context);
        
        byte[] serialized = SerializeDeserializeService.serialize(input);
        
        try {
            SerializeDeserializeService.parseAltPublication(serialized);
            Assert.fail("Expected IllegalArgumentException");
        } catch(IllegalArgumentException e) {
            Assert.assertTrue(e.getMessage().startsWith("Unexpected context count"));
        }
    }
}
